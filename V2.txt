import os
import tempfile
from datetime import datetime
import pandas as pd
import unicodedata
from tkinter import Tk, Frame, Label, Button, Entry, StringVar, OptionMenu, LEFT, RIGHT, BOTH, X
from tkinter import messagebox
from reportlab.lib.pagesizes import A4
from reportlab.pdfgen import canvas
from reportlab.lib.units import mm
from reportlab.lib.utils import simpleSplit
from PIL import Image, ImageTk
import fitz  # PyMuPDF
import io

# ----------------- Configuration -----------------
EMPLOYEES_FILE = 'Data.xlsx'   # <-- change si besoin
LOGO_PATH = 'logo.jpg'
STAMP_PATH = 'cachetITAP.png'
OUTPUT_PDF = 'lettre_liaison.pdf'

HOSPITAUX = {
    'Hôpital Korba': 'Rue Abou Kacem CHEBBI, 8070 KORBA NABEUL',
    'Groupement Médecine du Travail': 'Av. Hédi Nouira, 8000 Nabeul',
    'Polyclinique El Hakim': 'Km 1 Route Korba Tazarka, 8024 Korba, Nabeul Gouvernorat',
    'Polyclinique El Amen': 'Av. Hédi Nouira, Nabeul'
}

ENTREPRISE_INFO = {
    'name': 'CF MAIER ITAP',
    'address': 'Z.I El Mazraa, 8024 Tazarka, Tunisie',
    'phone': '+216 72 225 278 / +216 72 225 279',
    'fax': '+216 72 225 435'
}

# ----------------- Helpers -----------------
def remove_accents(text: str) -> str:
    if not isinstance(text, str):
        text = str(text)
    nfkd = unicodedata.normalize('NFKD', text)
    return ''.join([c for c in nfkd if not unicodedata.combining(c)])

def normalize_employee_columns(df: pd.DataFrame) -> pd.DataFrame:
    mapping = {}
    for col in df.columns:
        key = remove_accents(col).strip().lower()
        if 'matric' in key:
            mapping[col] = 'Matricule'
        elif key in ('prenom', 'prénom', 'prenom_employe', 'givenname', 'firstname') or 'prenom' in key:
            mapping[col] = 'Prénom'
        elif 'nom' in key:
            mapping[col] = 'Nom'
        elif 'cin' in key or 'ident' in key:
            mapping[col] = 'CIN'
        elif 'cnss' in key or 'social' in key:
            mapping[col] = 'CNSS'
    df = df.rename(columns=mapping)
    for needed in ['Matricule', 'Nom', 'Prénom', 'CIN', 'CNSS']:
        if needed not in df.columns:
            df[needed] = ''
    df['Matricule'] = df['Matricule'].astype(str).str.strip()
    df['Nom'] = df['Nom'].astype(str).str.strip()
    df['Prénom'] = df['Prénom'].astype(str).str.strip()
    df['CIN'] = df['CIN'].astype(str).str.strip()
    df['CNSS'] = df['CNSS'].astype(str).str.strip()
    return df

def load_employees():
    if not os.path.exists(EMPLOYEES_FILE):
        raise FileNotFoundError(f"Fichier employés introuvable: {EMPLOYEES_FILE}")
    if EMPLOYEES_FILE.lower().endswith('.xlsx') or EMPLOYEES_FILE.lower().endswith('.xls'):
        df = pd.read_excel(EMPLOYEES_FILE, engine='openpyxl')
    else:
        df = pd.read_csv(EMPLOYEES_FILE)
    return normalize_employee_columns(df)

def format_cin(cin):
    if pd.isna(cin) or str(cin).strip() == '':
        return ''
    s = ''.join(ch for ch in str(cin) if ch.isdigit())
    return s.zfill(8)

# ----------------- PDF Generation -----------------
def generate_pdf(data, hospital_name, hospital_address):
    c = canvas.Canvas(OUTPUT_PDF, pagesize=A4)
    width, height = A4
    margin = 20 * mm
    top_margin = 68 * mm
    logo_width = 40 * mm

    # Logo top-right
    if os.path.exists(LOGO_PATH):
        x = width - margin - logo_width
        y = height - top_margin - logo_width  # adjust if needed
        c.drawImage(LOGO_PATH, x, y, width=logo_width, preserveAspectRatio=True)

    # Company info on the left
    c.setFont('Helvetica-Bold', 10)
    c.drawString(margin, height - 40*mm, f"Nom de l'entreprise : {ENTREPRISE_INFO['name']}")
    c.setFont('Helvetica', 10)
    c.drawString(margin, height - 45*mm, f"Adresse : {ENTREPRISE_INFO['address']}")
    c.drawString(margin, height - 50*mm, f"Télephone : {ENTREPRISE_INFO['phone']}")
    c.drawString(margin, height - 55*mm, f"Fax : {ENTREPRISE_INFO['fax']}")

    # Titles centered
    c.setFont('Helvetica-Bold', 16)
    c.drawCentredString(width/2, height - 70*mm, "LETTRE DE LIAISON")
    c.setFont('Helvetica-Bold', 12)
    c.drawCentredString(width/2, height - 80*mm, "ADMISSION D’UN PATIENT")


    today = datetime.now().strftime('%d/%m/%Y %H:%M:%S')
    c.setFont('Helvetica', 10)
    c.drawString(margin, height - 95*mm, f"Date : {today}")

    y = height - 105*mm
    lines = [
        f"La société {ENTREPRISE_INFO['name']} demande au {hospital_name} l’admission d’un patient affilié {ENTREPRISE_INFO['name']} dans les conditions suivantes : \n",
        "",
        f"Hôpital : {hospital_name}",
        f"Adresse : {hospital_address}",
        f"Matricule : {data.get('Matricule','')}",
        f"Nom du patient : {data.get('Nom','')} {data.get('Prénom','')}",
        "Nationalité : Tunisienne",
        f"Numéro de la Carte d'Identité Nationale (CIN) : {data.get('CIN','')}",
        f"CNSS : {data.get('CNSS','')}",
        f"Médecin requérant : {data.get('MedecinRequerant','')}",
        f"Médecin(s) traitant(s) : {data.get('MedecinTraitant','')}",
        f"Date d'admission : {data.get('DateAdmission','')}",
        f"Type de prise en charge : {data.get('TypePriseEnCharge','')}",
        ""
    ]

    c.setFont('Helvetica', 10)
    for line in lines:
        wrapped = simpleSplit(line, 'Helvetica', 10, width - 2*margin)
        for wline in wrapped:
            c.drawString(margin, y, wline)
            y -= 6.5*mm

    paragraph = f"\nPrise en charge Totale par {ENTREPRISE_INFO['name']} : La facture du {hospital_name} est à régler totalement par {ENTREPRISE_INFO['name']}."
    wrapped = simpleSplit(paragraph, 'Helvetica', 10, width - 2*margin)
    for wline in wrapped:
        c.drawString(margin, y, wline)
        y -= 6.5*mm

    if os.path.exists(STAMP_PATH):
        c.drawImage(STAMP_PATH, margin, 20*mm, width=40*mm, preserveAspectRatio=True)

    c.setFont('Helvetica-Bold', 10)
    c.drawRightString(width - margin, 50*mm, hospital_name)
    c.save()

# ----------------- Tkinter App -----------------
class App:
    def __init__(self, master):
        self.master = master
        try:
            self.df = load_employees()
        except Exception as e:
            messagebox.showerror('Erreur', str(e))
            self.df = pd.DataFrame(columns=['Matricule','Nom','Prénom','CIN','CNSS'])

        self.hopital_var = StringVar(value=list(HOSPITAUX.keys())[0])
        self.matricule_var = StringVar()
        self.nom_var = StringVar()
        self.prenom_var = StringVar()
        self.cin_var = StringVar()
        self.cnss_var = StringVar()
        self.medecin_r_var = StringVar()
        self.medecin_t_var = StringVar()
        self.date_var = StringVar(value=datetime.now().strftime('%d/%m/%Y %H:%M:%S'))
        self.type_var = StringVar(value='Consultation médicale')

        # Live preview à chaque modification
        for var in [self.hopital_var, self.matricule_var, self.nom_var, self.prenom_var,
                    self.cin_var, self.cnss_var, self.medecin_r_var, self.medecin_t_var,
                    self.date_var, self.type_var]:
            var.trace_add('write', lambda *args: self.update_preview())

        left = Frame(master)
        left.pack(side=LEFT, fill=BOTH, expand=True, padx=10, pady=10)
        right = Frame(master)
        right.pack(side=RIGHT, fill=BOTH, expand=True, padx=10, pady=10)

        Label(left, text="Lieu d'admission :").pack()
        OptionMenu(left, self.hopital_var, *HOSPITAUX.keys()).pack(fill=X)

        for label, var in [
            ("Matricule", self.matricule_var),
            ("Nom", self.nom_var),
            ("Prénom", self.prenom_var),
            ("CIN", self.cin_var),
            ("CNSS", self.cnss_var),
            ("Médecin requérant", self.medecin_r_var),
            ("Médecin(s) traitant(s)", self.medecin_t_var),
            ("Date admission (jj/mm/aaaa HH:MM:SS)", self.date_var),
            ("Type de prise en charge", self.type_var)
        ]:
            Label(left, text=label).pack(anchor='w', pady=(6,0))
            Entry(left, textvariable=var).pack(fill=X)

        Button(left, text="Rechercher par Matricule", command=self.search_by_matricule).pack(pady=8)
        Button(left, text="Rechercher par Nom+Prénom", command=self.search_by_name).pack(pady=4)
        Button(left, text="Générer PDF", command=self.generate).pack(pady=8)

        Label(right, text='Aperçu PDF:').pack()
        self.preview_label = Label(right)
        self.preview_label.pack()

    # --------- Recherche ---------
    def search_by_matricule(self):
        m = self.matricule_var.get().strip()
        if not m:
            messagebox.showinfo('Info', 'Entrez un matricule à rechercher.')
            return
        row = self.df[self.df['Matricule'].astype(str).str.strip() == str(m)]
        if row.empty:
            messagebox.showinfo('Résultat', 'Aucun employé trouvé pour ce matricule.')
            return
        self.fill_fields(row.iloc[0])

    def search_by_name(self):
        nom_input = self.nom_var.get().strip()
        prenom_input = self.prenom_var.get().strip()
        df = self.df
        if nom_input and prenom_input:
            mask = (df['Nom'].astype(str).str.lower().str.strip() == nom_input.lower()) & \
                   (df['Prénom'].astype(str).str.lower().str.strip() == prenom_input.lower())
            row = df[mask]
        elif nom_input:
            if ' ' in nom_input:
                parts = nom_input.split()
                if len(parts) >= 2:
                    n, p = parts[0].lower(), parts[1].lower()
                    mask = (df['Nom'].astype(str).str.lower().str.strip() == n) & \
                           (df['Prénom'].astype(str).str.lower().str.strip() == p)
                    row = df[mask]
                    if row.empty:
                        mask = (df['Nom'].astype(str).str.lower().str.strip() == parts[1].lower()) & \
                               (df['Prénom'].astype(str).str.lower().str.strip() == parts[0].lower())
                        row = df[mask]
                else:
                    row = df[df['Nom'].astype(str).str.lower().str.strip() == nom_input.lower()]
            else:
                row = df[df['Nom'].astype(str).str.lower().str.strip() == nom_input.lower()]
        else:
            messagebox.showinfo('Info', 'Entrez au moins le Nom ou le Nom+Prénom pour la recherche.')
            return

        if row.empty:
            messagebox.showinfo('Résultat', 'Aucun employé trouvé pour ce Nom/Prénom.')
            return
        self.fill_fields(row.iloc[0])

    def fill_fields(self, row):
        self.matricule_var.set(str(row.get('Matricule','')).strip())
        self.nom_var.set(str(row.get('Nom','')).strip())
        self.prenom_var.set(str(row.get('Prénom','')).strip())
        self.cin_var.set(format_cin(row.get('CIN','')))
        self.cnss_var.set(str(row.get('CNSS','')).strip())
        self.update_preview()

    # --------- Génération PDF ---------
    def generate(self):
        data = {
            'Matricule': self.matricule_var.get().strip(),
            'Nom': self.nom_var.get().strip(),
            'Prénom': self.prenom_var.get().strip(),
            'CIN': format_cin(self.cin_var.get()),
            'CNSS': self.cnss_var.get().strip(),
            'MedecinRequerant': self.medecin_r_var.get().strip(),
            'MedecinTraitant': self.medecin_t_var.get().strip(),
            'DateAdmission': self.date_var.get().strip(),
            'TypePriseEnCharge': self.type_var.get().strip()
        }
        hopital = self.hopital_var.get()
        adresse = HOSPITAUX[hopital]
        generate_pdf(data, hopital, adresse)
        messagebox.showinfo('Succès', f'PDF généré: {OUTPUT_PDF}')

    # --------- Aperçu live ---------
    def update_preview(self):
        try:
            data = {
                'Matricule': self.matricule_var.get().strip(),
                'Nom': self.nom_var.get().strip(),
                'Prénom': self.prenom_var.get().strip(),
                'CIN': format_cin(self.cin_var.get()),
                'CNSS': self.cnss_var.get().strip(),
                'MedecinRequerant': self.medecin_r_var.get().strip(),
                'MedecinTraitant': self.medecin_t_var.get().strip(),
                'DateAdmission': self.date_var.get().strip(),
                'TypePriseEnCharge': self.type_var.get().strip()
            }
            hopital = self.hopital_var.get()
            adresse = HOSPITAUX[hopital]

            # PDF en mémoire
            doc = fitz.open()
            page = doc.new_page()
            text = f"""
LETTRE DE LIAISON
ADMISSION D’UN PATIENT

Date : {datetime.now().strftime('%d/%m/%Y %H:%M:%S')}

Hôpital : {hopital}
Adresse : {adresse}
Matricule : {data['Matricule']}
Nom : {data['Nom']} {data['Prénom']}
CIN : {data['CIN']}
CNSS : {data['CNSS']}
Médecin requérant : {data['MedecinRequerant']}
Médecin(s) traitant(s) : {data['MedecinTraitant']}
Date d'admission : {data['DateAdmission']}
Type de prise en charge : {data['TypePriseEnCharge']}

Prise en charge Totale par {ENTREPRISE_INFO['name']} : La facture du {hopital} est à régler totalement par {ENTREPRISE_INFO['name']}.
"""
            page.insert_text((50, 50), text, fontsize=12)

            pix = page.get_pixmap()
            img_data = pix.tobytes("ppm")
            img = Image.open(io.BytesIO(img_data))
            img.thumbnail((400, 500))
            self.preview_image = ImageTk.PhotoImage(img)
            self.preview_label.config(image=self.preview_image)
        except Exception as e:
            self.preview_label.config(text=f"Aperçu indisponible: {e}")

# --------- Lancement ---------
if __name__ == '__main__':
    root = Tk()
    root.geometry('1000x700')
    root.title('Générateur Lettre de Liaison - CF MAIER ITAP')
    app = App(root)
    root.mainloop()
